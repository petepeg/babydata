@page "/feedingrecords"
@using BabyData.Components.Account
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BabyData.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BabyData.Data.ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject IUserIdentityProcessor UserIdentityProcessor
@attribute [StreamRendering]

@* prevent double render, consider persisiting state https://jonhilton.net/persist-state-between-renders-net8/#:%7E:text=Chances%20are%20it%27s%20down%20to,show%20something%20nice%20and%20quickly *@
@rendermode @(new InteractiveServerRenderMode(false)) 

<style>
    tr {
        position: relative;
    }

    .click-area {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        cursor: pointer;
    }

    .bi {
        display: inline-block;
        position: relative;
        width: 1.25rem;
        height: 1.25rem;
        margin-right: 0.75rem;
        top: 0.25rem;
        background-size: cover;
    }

    .bi-heart-fill {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='black' class='bi bi-heart-fill' viewBox='0 0 16 16'%3E%3Cpath d='M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314'/%3E%3C/svg%3E");
    }

    .bi-hexagon {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='black' class='bi bi-hexagon' viewBox='0 0 16 16'%3E%3Cpath d='M14 4.577v6.846L8 15l-6-3.577V4.577L8 1zM8.5.134a1 1 0 0 0-1 0l-6 3.577a1 1 0 0 0-.5.866v6.846a1 1 0 0 0 .5.866l6 3.577a1 1 0 0 0 1 0l6-3.577a1 1 0 0 0 .5-.866V4.577a1 1 0 0 0-.5-.866z'/%3E%3C/svg%3E");
    }
</style>

<PageTitle>Feeding Records</PageTitle>
<h1>Feeding Records</h1>

@if (FilteredFeedingRecords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <BabyData.Components.Pages.BabyPages.BabyComponent Babies="Babies" SelectedBabyId="SelectedBaby.Id" OnValueChanged="OnValueChanged" />
    <p>
        <a href="feedingrecords/create?BabyId=@SelectedBaby.Id" class="btn btn-primary">Create New</a>
    </p>

    <QuickGrid Class="table table-striped table-hover w-auto" Items="FilteredFeedingRecords" Pagination="paginationState">
        <TemplateColumn Title="Date" SortBy="@SortByDate" >
            <div class="click-area" @onclick="() => RowClick(context)"></div>
            <i class="bi bi-hexagon"></i>
            <span>@context.Date.ToString()</span>
            <p class="text-center mb-0">@context.StartTime.ToString() - @context.EndTime.ToString()</p>
        </TemplateColumn>
        <TemplateColumn>
            <p class="text-center mb-0 mt-0">something?</p>
            <p class="small text-center mb-0 mt-0">@context.FeedingType</p>
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="paginationState" />


}

@code {
    private ApplicationDbContext context = default!;
    private IQueryable<FeedingRecord>? FeedingRecords;
    private IQueryable<FeedingRecord>? FilteredFeedingRecords
    {
        get
        {
            if (SelectedBaby is null)
                return null;

            return FeedingRecords?.Where(fr => fr.BabyId == SelectedBaby.Id);


        }
    }

    GridSort<FeedingRecord> SortByDate = GridSort<FeedingRecord>
    .ByAscending(x => x.Date)
    .ThenAscending(x => x.StartTime);

    PaginationState paginationState = new() { ItemsPerPage = 15 };

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

    private Baby SelectedBaby { get; set; } = new();
    private List<Baby> Babies { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        var userId = await UserIdentityProcessor.GetCurrentUserId();

        context = await DbFactory.CreateDbContextAsync();
        FeedingRecords = (await context.FeedingRecords.Where(x => x.UserId.ToString() == userId).ToListAsync()).AsQueryable();
        Babies = await context.Babies.Where(x => x.UserId.ToString() == userId).ToListAsync();
        SelectedBaby = Babies.Where(x => x.UserId.ToString() == userId).FirstOrDefault() ?? new Baby();
    }

    private void RowClick(FeedingRecord feedingRecord) => Navigation.NavigateTo($"feedingrecords/details?id={feedingRecord.Id}");

    private void OnValueChanged(Baby newValue)
    {
        SelectedBaby = newValue;
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
