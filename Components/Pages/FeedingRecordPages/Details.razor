@page "/feedingrecords/details"
@using Microsoft.EntityFrameworkCore
@using BabyData.Data
@inject IDbContextFactory<BabyData.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>FeedingRecord</h2>
    <hr />
    @if (feedingrecord is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@feedingrecord.Date</dd>
            <dt class="col-sm-2">StartTime</dt>
            <dd class="col-sm-10">@feedingrecord.StartTime</dd>
            <dt class="col-sm-2">EndTime</dt>
            <dd class="col-sm-10">@feedingrecord.EndTime</dd>
            <dt class="col-sm-2">FeedingType</dt>
            <dd class="col-sm-10">@feedingrecord.FeedingType</dd>
            <dt class="col-sm-2">Notes</dt>
            <dd class="col-sm-10">@feedingrecord.Notes</dd>
        </dl>
        <div>
            <a href="@($"/feedingrecords/edit?id={feedingrecord.Id}")" class="btn btn-primary">Edit</a>
            <a href="@($"feedingrecords/delete?id={feedingrecord.Id}")" class="btn btn-danger">Delete</a>
        </div>
        <div class="float-end">
            <a href="@($"/feedingrecords")" class="btn btn-primary ">Back to List</a>
        </div>
    }
</div>

@code {
    private FeedingRecord? feedingrecord;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        feedingrecord = await context.FeedingRecords.FirstOrDefaultAsync(m => m.Id == Id);

        if (feedingrecord is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
