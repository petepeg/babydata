@page "/sleeprecords"
@using BabyData.Components.Account
@using BabyData.ExtentionMethods
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BabyData.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BabyData.Data.ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject IUserIdentityProcessor UserIdentityProcessor
@attribute [StreamRendering]

@* prevent double render, consider persisiting state https://jonhilton.net/persist-state-between-renders-net8/#:%7E:text=Chances%20are%20it%27s%20down%20to,show%20something%20nice%20and%20quickly *@
@rendermode @(new InteractiveServerRenderMode(false)) 

<div>
    <PageTitle>Sleep Records</PageTitle>
    <h1 class="text-center">Sleep Records</h1>

    @if (FilteredSleepRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="d-flex justify-content-end">
            <BabyData.Components.Pages.BabyPages.BabyComponent Babies="Babies" SelectedBabyId="SelectedBaby?.Id" OnValueChanged="OnValueChanged" />
        </div>

        <p><a href="sleeprecords/create?BabyId=@SelectedBaby?.Id" class="btn btn-primary w-100">Create New</a></p>

        <div>
            <InputSelect id="daysPreviousSelect" @bind-Value="NumberOfDays" class="form-select form-select-sm w-auto">
                <option value="1">Today</option>
                <option value="7">Last Week</option>
                <option value="14">Last Two Weeks</option>
                <option value="30">Last Month</option>
                <option value="0">All</option>
            </InputSelect>
        </div>
        <hr />
        <QuickGrid Class="table table-striped table-hover mx-auto" Items="FilteredSleepRecords" Pagination="paginationState">
            <TemplateColumn Title="Date" SortBy="@SortByDate" InitialSortDirection="SortDirection.Descending" IsDefaultSortColumn="true">
                <div class="click-area" @onclick="() => RowClick(context)"></div>
                <p class="ms-2 my-0">@context.LocalDateTimes.StartTimeLocal.ToShortDateString()</p>
                <p class="ms-2 mb-0 text-nowrap">@context.LocalDateTimes.StartTimeString - @context.LocalDateTimes.EndTimeString</p>
            </TemplateColumn>
            <TemplateColumn Title="Duration">
                <p class="ms-2 mb-0 text-nowrap">@context.ElapsedTime.ToHumanReadable()</p>
            </TemplateColumn>
        </QuickGrid>

        <Paginator State="paginationState" />

    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    private ApplicationDbContext context = default!;
    private TimeZoneInfo timeZoneInfo => TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
    private Baby? SelectedBaby { get; set; } = new();
    private List<Baby> Babies { get; set; } = new();
    private int NumberOfDays = 0;
    private GridSort<SleepRecord> SortByDate = GridSort<SleepRecord>.ByAscending(x => x.StartTimeUtc);
    private PaginationState paginationState = new() { ItemsPerPage = 15 };
    private List<SleepRecord> SleepRecords = new();
    private IQueryable<SleepRecord>? FilteredSleepRecords
    {
        get
        {
            if (SelectedBaby is null)
                return null;

            var filtered = SleepRecords.AsQueryable().Where(fr => fr.BabyId == SelectedBaby.Id);

            if (NumberOfDays > 0)
            {
                var numDays = TimeSpan.FromDays(NumberOfDays);
                var now = DateTime.Now;
                filtered = filtered.Where(fr => fr.StartTimeUtc.Date >= now.Subtract(numDays).Date );
            }
            return filtered;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var userId = await UserIdentityProcessor.GetCurrentUserId();

        context = await DbFactory.CreateDbContextAsync();
        SleepRecords = (await context.SleepRecords.Where(x => x.UserId == userId).ToListAsync());
        SleepRecords.ForEach(x => x.SetTimeLocalFromUtc(timeZoneInfo));

        Babies = await context.Babies.Where(x => x.UserId == userId).ToListAsync();
        SelectedBaby = Babies.Where(x => x.UserId == userId).FirstOrDefault();
        
        if (SelectedBaby is null)
        {
            Navigation.NavigateTo($"baby/create");
        }
    }

    private void RowClick(SleepRecord sleepRecord) => Navigation.NavigateTo($"sleeprecords/details?id={sleepRecord.Id}");

    private void OnValueChanged(Baby newValue)
    {
        SelectedBaby = newValue;
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
