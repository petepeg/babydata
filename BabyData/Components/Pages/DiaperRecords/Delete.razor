@page "/diaperrecords/delete"
@using Microsoft.EntityFrameworkCore
@using BabyData.Data
@inject IDbContextFactory<BabyData.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Diaper Record</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Diaper Record</h2>
    <hr />
    @if (diaperRecord is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col">Date</dt>
            <dd class="col">@diaperRecord.LocalDateTimes.StartTimeLocal.ToShortDateString()</dd>
        </dl>
        <dl class="row">
            <dt class="col">StartTime</dt>
            <dd class="col">@diaperRecord.LocalDateTimes.StartTimeString</dd>
        </dl>
        <dl class="row">
            <dt class="col">EndTime</dt>
            <dd class="col">@diaperRecord.LocalDateTimes.EndTimeString</dd>
        </dl>
        <dl class="row">
            <dt class="col">Notes</dt>
            <dd class="col">@diaperRecord.Notes</dd>
        </dl>
        <EditForm method="post" Model="diaperRecord" OnValidSubmit="DeleteFeedingRecord" FormName="delete" Enhance>
            <button type="submit" class="btn btn-outline-danger" disabled="@(diaperRecord is null)">Delete</button> |
            <a href="/feedingrecords" class="btn btn-outline-primary">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private DiaperRecord? diaperRecord;
    private TimeZoneInfo timeZoneInfo => TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        diaperRecord = await context.DiaperRecords.FirstOrDefaultAsync(m => m.Id == Id);

        if (diaperRecord is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        diaperRecord?.SetTimeLocalFromUtc(timeZoneInfo);

    }

    private async Task DeleteFeedingRecord()
    {
        using var context = DbFactory.CreateDbContext();
        context.DiaperRecords.Remove(diaperRecord!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/diaperrecords");
    }
}
