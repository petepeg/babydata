@page "/diaperrecords/delete"

@using Microsoft.EntityFrameworkCore
@using BabyData.Data
@using System.Globalization

@inject IDbContextFactory<BabyData.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Diaper Record</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Diaper Record</h2>
    <hr />
    @if (DiaperRecord is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl>
            <div class="row">
                <dt class="col pe-1">Date:</dt>
                <dd class="col px-0">@DiaperRecord.LocalDateTimes.StartTimeLocal.ToShortDateString()</dd>
            </div>

            <div class="row">
                <dt class="col pe-1">Time:</dt>
                <dd class="col px-0">@DiaperRecord.LocalDateTimes.StartTimeString</dd>
            </div>

            <div class="row">
                <dt class="col pe-1">Poop:</dt>
                <dd class="col px-0">@(DiaperRecord.Poop ? "Yes" : "No")</dd>
            </div>
            @if(DiaperRecord.Poop)
            {
                <div class="row">
                    <dt class="col pe-1">Poop Color:</dt>
                    <dd class="col px-0"><span style="background-color:@DiaperRecord.ColorCode">💩</span></dd>
                </div>

            }
            <div class="row">
                <dt class="col pe-1">Pee:</dt>
                <dd class="col px-0">@(DiaperRecord.Pee ? "Yes" : "No")</dd>
            </div>

            <dt>Notes:</dt>
            <dd>@DiaperRecord.Notes</dd>

            <dt>Tags:</dt>
            <dd>
                <p class="ms-2 mb-0">@string.Join(", ", DiaperRecord.Tags.Select(x => TextInfo.ToTitleCase(x.Tag.Title)))</p>
            </dd>
        </dl>
        <EditForm method="post" Model="DiaperRecord" OnValidSubmit="DeleteFeedingRecord" FormName="delete" Enhance>
            <button type="submit" class="btn btn-outline-danger" disabled="@(DiaperRecord is null)">Delete</button> |
            <a href="/diaperrecords" class="btn btn-outline-primary">Back to List</a>
        </EditForm>
    }
</div>

@code {
    [SupplyParameterFromQuery] private Guid Id { get; set; }
    
    private DiaperRecord? DiaperRecord;
    private TimeZoneInfo TimeZoneInfo => TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
    private TextInfo TextInfo = new CultureInfo("en-US", false).TextInfo;


    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        DiaperRecord = await context.DiaperRecords.FirstOrDefaultAsync(m => m.Id == Id);

        if (DiaperRecord is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        DiaperRecord?.SetTimeLocalFromUtc(TimeZoneInfo);

    }

    private async Task DeleteFeedingRecord()
    {
        using var context = DbFactory.CreateDbContext();
        context.DiaperRecords.Remove(DiaperRecord!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/diaperrecords");
    }
}
