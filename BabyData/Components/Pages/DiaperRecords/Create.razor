@page "/diaperrecords/create"

@using BabyData.Components.Account
@using BlazorColorPicker
@using Microsoft.EntityFrameworkCore
@using BabyData.Data
@using System.Globalization

@inject IDbContextFactory<BabyData.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IUserIdentityProcessor UserIdentityProcessor
@inject IToastService toastService

@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>Create</PageTitle>

<h3>New Diaper Record</h3>
<hr />
<div class="d-flex row">
    <div class="d-flex col-4 w-100">
        <EditForm method="post" Model="DiaperRecord" OnValidSubmit="AddRecord" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/> 

            <TimeAdjustComponent UtcAndLocalDateTimeRecord="DiaperRecord" StartTimeLabel="Time" HideAdjusters=true HideElapsedTime=true HideEndTime=true/>

            <div class="mb-3">
                <InputCheckbox @bind-Value="DiaperRecord.Pee" class="btn-check" id="btn-pee"></InputCheckbox>
                <label class="btn btn-primary w-100" for="btn-pee">@PeeText</label>
            </div>

            <div class="mb-3 row g-3">
                <div class="col-auto flex-grow-1">
                    <InputCheckbox @bind-Value="DiaperRecord.Poop" class="btn-check" id="btn-poop"></InputCheckbox>
                    <label class="btn btn-primary w-100" for="btn-poop">@PoopText</label>
                </div>

                <div class="col-auto" hidden="@HidePoopColor">
                    <button class="btn btn-primary" type="button" @onclick="OpenModal">
                        <div style="background-color:@DiaperRecord.ColorCode" class="buttonColor"></div> Select a Color
                    </button>
                    <ColorPicker Title="Poop Color" IsOpened="IsOpened" Closed="ClosedEvent" MyColor="@DiaperRecord.ColorCode"></ColorPicker>
                </div>

            </div>

            <div class="mb-3">
                <label for="notes" class="form-label">Notes:</label> 
                <InputTextArea id="notes" @bind-Value="DiaperRecord.Notes" class="form-control" /> 
                <ValidationMessage For="() => DiaperRecord.Notes" class="text-danger" /> 
            </div>

            <div class="mb-3 row g-3">
                <label class="form-label">Tags:</label>
                <div class="col-auto">
                    <InputText id="tag" @bind-Value="TagInput" class="p-1 form-control-sm" />
                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-sm" @onclick="AddTag">Add</button>
                </div>
            </div>
            <div class="mb-3 row">
                @foreach (var diaperTag in DiaperRecord.Tags)
                {
                    DiaperTag tag = diaperTag;
                    <div class="col-auto">
                        <span>@TextInfo.ToTitleCase(diaperTag.Tag.Title)</span>
                        <button type="button" class="btn btn-close" @onclick="() => RemoveTag(diaperTag)"></button>
                    </div>
                }
            </div>

            <a class="btn btn-outline-secondary" href="/diaperrecords">Back to List</a>
            <button type="submit" class="btn btn-outline-primary">Create</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm] private DiaperRecord DiaperRecord { get; set; } = default!;
    [SupplyParameterFromQuery] private Guid BabyId { get; set; }

    private TimeZoneInfo TimeZoneInfo => TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
    private ApplicationDbContext Context = default!;
    private TextInfo TextInfo = new CultureInfo("en-US", false).TextInfo;
    private bool HidePoopColor => !DiaperRecord.Poop;
    private string PeeText => DiaperRecord.Pee ? "Pee" : "Pee?";
    private string PoopText => DiaperRecord.Poop ? "Poop" : "Poop?";
    bool IsOpened = false;
    string TagInput = "";

    void OpenModal()
    {
        IsOpened = true;
    }

    void ClosedEvent(string value)
    {
        DiaperRecord.ColorCode = value;
        IsOpened = false;
    }

    protected override async Task OnInitializedAsync()
    {
        DiaperRecord ??= new DiaperRecord();
        DiaperRecord.BabyId = BabyId;
        DiaperRecord.SetTimeLocalFromUtc(TimeZoneInfo);
        DiaperRecord.UserId = await UserIdentityProcessor.GetCurrentUserId();

    }

    async Task AddTag()
    {
        if (string.IsNullOrEmpty(TagInput))
            return;

        var tagInputSanitized = TagInput.ToLower();
        TagInput = "";

        Context = await DbFactory.CreateDbContextAsync();
        var tag = await Context.Tags.SingleOrDefaultAsync(x => x.Title == tagInputSanitized) ?? new Tag { Title = tagInputSanitized };
        if (DiaperRecord.Tags.Any(x => x.Tag.Title == tagInputSanitized))
        {
            toastService.ShowError("Tag already added");
            return;
        }

        var diaperTag = new DiaperTag { Tag = tag, DiaperRecord = DiaperRecord };
        DiaperRecord.Tags.Add(diaperTag);
    }

    void RemoveTag(DiaperTag diaperTag)
    {
        DiaperRecord.Tags.Remove(diaperTag);
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddRecord()
    {
        DiaperRecord.SetTimeUtcFromLocal(TimeZoneInfo);

        using var context = DbFactory.CreateDbContext();

        context.Tags.UpdateRange(DiaperRecord.Tags.Select(x => x.Tag));
        context.DiaperRecords.Add(DiaperRecord);

        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/diaperrecords");
    }
}
