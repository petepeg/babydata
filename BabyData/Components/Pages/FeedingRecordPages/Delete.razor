@page "/feedingrecords/delete"
@using Microsoft.EntityFrameworkCore
@using BabyData.Data
@inject IDbContextFactory<BabyData.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Feeding Record</h2>
    <hr />
    @if (feedingrecord is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col">Date</dt>
            <dd class="col">@feedingrecord.LocalDateTimes.StartTimeLocal.ToShortDateString()</dd>
        </dl>
        <dl class="row">
            <dt class="col">StartTime</dt>
            <dd class="col">@feedingrecord.LocalDateTimes.StartTimeString</dd>
        </dl>
        <dl class="row">
            <dt class="col">EndTime</dt>
            <dd class="col">@feedingrecord.LocalDateTimes.EndTimeString</dd>
        </dl>
        <dl class="row">
            <dt class="col">FeedingType</dt>
            <dd class="col">@feedingrecord.FeedingType
                @if (feedingrecord.FeedingType == FeedingType.Breast)
                {
                    @($",{feedingrecord.BreastSelection}")
                }
                @if (feedingrecord.FeedingType == FeedingType.Bottle || feedingrecord.FeedingType == FeedingType.Solid)
                {
                    @($"-{feedingrecord.QuantityInOz}oz")
                }
            </dd>
        </dl>
        <dl class="row">
            <dt class="col">Notes</dt>
            <dd class="col">@feedingrecord.Notes</dd>
        </dl>
        <EditForm method="post" Model="feedingrecord" OnValidSubmit="DeleteFeedingRecord" FormName="delete" Enhance>
            <button type="submit" class="btn btn-outline-danger" disabled="@(feedingrecord is null)">Delete</button> |
            <a href="/feedingrecords" class="btn btn-outline-primary">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private FeedingRecord? feedingrecord;
    private TimeZoneInfo timeZoneInfo => TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        feedingrecord = await context.FeedingRecords.FirstOrDefaultAsync(m => m.Id == Id);

        if (feedingrecord is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        feedingrecord?.SetTimeLocalFromUtc(timeZoneInfo);

    }

    private async Task DeleteFeedingRecord()
    {
        using var context = DbFactory.CreateDbContext();
        context.FeedingRecords.Remove(feedingrecord!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/feedingrecords");
    }
}
