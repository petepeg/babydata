@page "/feedingrecords/create"
@using BabyData.Components.Account
@using BabyData.ExtentionMethods
@using Microsoft.EntityFrameworkCore
@using BabyData.Data
@inject IDbContextFactory<BabyData.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IUserIdentityProcessor UserIdentityProcessor
@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>New Feeding Record</PageTitle>

<h3>New Feeding Record</h3>
<hr />
<div class="d-flex row">
    <div class="d-flex col-4 w-100">
        <EditForm method="post" Model="FeedingRecord" OnValidSubmit="AddFeedingRecord" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/> 

            <TimeAdjustComponent UtcAndLocalDateTimeRecord="FeedingRecord"/>

            <div class="mb-3 px-3">
                <label for="feedingtype" class="form-label">FeedingType:</label> 
                <InputSelect id="feedingtype" @bind-Value="FeedingRecord.FeedingType" class="form-control">
                    @foreach (var option in Enum.GetValues(typeof(FeedingType)))
                    {
                        <option value="@option">@option</option>
                    }    
                </InputSelect>
                <ValidationMessage For="() => FeedingRecord.FeedingType" class="text-danger" /> 
            </div>
            <div class="mb-3 px-3" hidden="@HideQuantity">
                <label for="quantity" class="form-label">Qunatity In Ounces</label>
                <InputNumber id="quantity" @bind-Value="FeedingRecord.QuantityInOz" class="form-control" />
                <ValidationMessage For="() => FeedingRecord.QuantityInOz" class="text-danger" />
            </div>
            <div class="mb-3 px-3" hidden="@HideBreastSelection">
                <label for="breastSelection" class="form-label">Breast Selection</label>
                <InputSelect id="breastSelection" @bind-Value="FeedingRecord.BreastSelection" class="form-control">
                    @foreach (var option in Enum.GetValues(typeof(BreastSelection)))
                    {
                        <option value="@option">@option</option>
                    }   
                </InputSelect>
            </div>
            <div class="mb-3 px-3">
                <label for="notes" class="form-label">Notes:</label> 
                <InputTextArea id="notes" @bind-Value="FeedingRecord.Notes" class="form-control" /> 
                <ValidationMessage For="() => FeedingRecord.Notes" class="text-danger" /> 
            </div>
            <a class="btn btn-outline-secondary" href="/feedingrecords">Back to List</a>
            <button type="submit" class="btn btn-outline-primary">Create</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private FeedingRecord FeedingRecord { get; set; } = default!;

    [SupplyParameterFromQuery]
    private Guid BabyId { get; set; }

    private bool HideQuantity => !(FeedingRecord.FeedingType == FeedingType.Solid || FeedingRecord.FeedingType == FeedingType.Bottle);
    private bool HideBreastSelection => FeedingRecord.FeedingType != FeedingType.Breast;
    private TimeZoneInfo timeZoneInfo => TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");

    protected override async Task OnInitializedAsync()
    {
        FeedingRecord ??= new FeedingRecord();
        FeedingRecord.BabyId = BabyId;
        FeedingRecord.SetTimeLocalFromUtc(timeZoneInfo);
        FeedingRecord.UserId = await UserIdentityProcessor.GetCurrentUserId();


    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddFeedingRecord()
    {
        FeedingRecord.SetTimeUtcFromLocal(timeZoneInfo);

        using var context = DbFactory.CreateDbContext();
        context.FeedingRecords.Add(FeedingRecord);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/feedingrecords");
    }
}
