@page "/feedingrecords/edit"
@using Microsoft.EntityFrameworkCore
@using BabyData.Data
@inject IDbContextFactory<BabyData.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>FeedingRecord</h2>
<hr />
@if (FeedingRecord is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col">
            <EditForm method="post" Model="FeedingRecord" OnValidSubmit="UpdateFeedingRecord" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="FeedingRecord.Id" value="@FeedingRecord.Id" />
                <input type="hidden" name="FeedingRecord.UserId" value="@FeedingRecord.UserId" />
                <input type="hidden" name="FeedingRecord.BabyId" value="@FeedingRecord.BabyId" />
                <div class="mb-3">
                    <label for="starttime" class="form-label">StartTime:</label>
                    <InputDate Type="InputDateType.DateTimeLocal" id="starttime" @bind-Value="FeedingRecord.LocalDateTimes.StartTimeLocal" class="form-control" />
                    <ValidationMessage For="() => FeedingRecord.LocalDateTimes.StartTimeLocal" class="text-danger" />
                </div>
                <div class="btn-group mb-2" role="group" aria-label="StartTime Adjustments">
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeStartTime(-1)">-1min</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeStartTime(-5)">-5min</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeStartTime(-30)">-30min</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeStartTime(1)">+1min</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeStartTime(5)">+5min</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeStartTime(30)">+30min</button>
                </div>
                <div class="mb-3">
                    <label for="endtime" class="form-label">EndTime:</label>
                    <InputDate Type="InputDateType.DateTimeLocal" id="endtime" @bind-Value="FeedingRecord.LocalDateTimes.EndTimeLocal" class="form-control" />
                    <ValidationMessage For="() => FeedingRecord.LocalDateTimes.EndTimeLocal" class="text-danger" />
                </div>
                <div class="btn-group mb-2" role="group" aria-label="EndTime Adjustments">
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeEndTime(-1)">-1min</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeEndTime(-5)">-5min</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeEndTime(-30)">-30min</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeEndTime(1)">+1min</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeEndTime(5)">+5min</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => FeedingRecord.LocalDateTimes.NudgeEndTime(30)">+30min</button>
                </div>
                <div>
                    <p>Total Time: @FeedingRecord.LocalDateTimes.ElapsedTime.ToString()</p>
                </div>
                <div class="mb-3">
                    <label for="feedingtype" class="form-label">FeedingType:</label>
                    <InputSelect id="feedingtype" @bind-Value="FeedingRecord.FeedingType" class="form-control">
                        @foreach (var option in Enum.GetValues(typeof(FeedingType)))
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => FeedingRecord.FeedingType" class="text-danger" />
                </div>
                <div class="mb-3" hidden="@HideQuantity">
                    <label for="quantity" class="form-label">Qunatity In Ounces</label>
                    <InputNumber id="quantity" @bind-Value="FeedingRecord.QuantityInOz" class="form-control" />
                    <ValidationMessage For="() => FeedingRecord.QuantityInOz" class="text-danger" />
                </div>
                <div class="mb-3" hidden="@HideBreastSelection">
                    <label for="breastSelection" class="form-label">Breast Selection</label>
                    <InputSelect id="breastSelection" @bind-Value="FeedingRecord.BreastSelection" class="form-control">
                        @foreach (var option in Enum.GetValues(typeof(BreastSelection)))
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="notes" class="form-label">Notes:</label>
                    <InputTextArea id="notes" @bind-Value="FeedingRecord.Notes" class="form-control" />
                    <ValidationMessage For="() => FeedingRecord.Notes" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/feedingrecords">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    private TimeZoneInfo timeZoneInfo => TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");

    [SupplyParameterFromForm]
    private FeedingRecord? FeedingRecord { get; set; }

    private bool HideQuantity => !(FeedingRecord?.FeedingType == FeedingType.Solid || FeedingRecord?.FeedingType == FeedingType.Bottle);
    private bool HideBreastSelection => FeedingRecord?.FeedingType != FeedingType.Breast;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        FeedingRecord ??= await context.FeedingRecords.FirstOrDefaultAsync(m => m.Id == Id);
        FeedingRecord?.SetTimeLocalFromUtc(timeZoneInfo);


        if (FeedingRecord is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateFeedingRecord()
    {
        FeedingRecord?.SetTimeUtcFromLocal(timeZoneInfo);

        using var context = DbFactory.CreateDbContext();
        context.Attach(FeedingRecord!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FeedingRecordExists(FeedingRecord!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/feedingrecords");
    }

    private bool FeedingRecordExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.FeedingRecords.Any(e => e.Id == id);
    }

}
